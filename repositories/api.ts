/* tslint:disable */
/* eslint-disable */
/**
 * IM CXM APIs Documentation
 * IM CXM OpenApi description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Adventure model
 * @export
 * @interface Adventure
 */
export interface Adventure {
    /**
     * 
     * @type {number}
     * @memberof Adventure
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Adventure
     */
    'region_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Adventure
     */
    'country_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Adventure
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Adventure
     */
    'highlights'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Adventure
     */
    'testimonial'?: string;
    /**
     * 
     * @type {string}
     * @memberof Adventure
     */
    'client_name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Adventure
     */
    'slide_urls'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Adventure
     */
    'map_url'?: string;
}
/**
 * Adventure Resource model
 * @export
 * @interface AdventureResource
 */
export interface AdventureResource {
    /**
     * 
     * @type {number}
     * @memberof AdventureResource
     */
    'id'?: number;
    /**
     * 
     * @type {AdventureResourceRegion}
     * @memberof AdventureResource
     */
    'region'?: AdventureResourceRegion;
    /**
     * 
     * @type {string}
     * @memberof AdventureResource
     */
    'country_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdventureResource
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdventureResource
     */
    'highlights'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AdventureResource
     */
    'testimonial'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdventureResource
     */
    'client_name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdventureResource
     */
    'slides'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AdventureResource
     */
    'map_url'?: string;
}
/**
 * 
 * @export
 * @interface AdventureResourceRegion
 */
export interface AdventureResourceRegion {
    /**
     * 
     * @type {number}
     * @memberof AdventureResourceRegion
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdventureResourceRegion
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<AdventureResource>}
     * @memberof InlineResponse200
     */
    'data'?: Array<AdventureResource>;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {AdventureResource}
     * @memberof InlineResponse2001
     */
    'data'?: AdventureResource;
}
/**
 * 
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
    /**
     * 
     * @type {SiteResource}
     * @memberof InlineResponse20010
     */
    'data'?: SiteResource;
}
/**
 * 
 * @export
 * @interface InlineResponse20011
 */
export interface InlineResponse20011 {
    /**
     * 
     * @type {Array<UserResource>}
     * @memberof InlineResponse20011
     */
    'data'?: Array<UserResource>;
}
/**
 * 
 * @export
 * @interface InlineResponse20012
 */
export interface InlineResponse20012 {
    /**
     * 
     * @type {UserResource}
     * @memberof InlineResponse20012
     */
    'data'?: UserResource;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<RegionResource>}
     * @memberof InlineResponse2002
     */
    'data'?: Array<RegionResource>;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {Array<RegionFullResource>}
     * @memberof InlineResponse2003
     */
    'data'?: Array<RegionFullResource>;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {Array<SiteResource>}
     * @memberof InlineResponse2004
     */
    'data'?: Array<SiteResource>;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {Array<MediaTypeResource>}
     * @memberof InlineResponse2005
     */
    'data'?: Array<MediaTypeResource>;
}
/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 
     * @type {MediaTypeResource}
     * @memberof InlineResponse2006
     */
    'data'?: MediaTypeResource;
}
/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * 
     * @type {RegionResource}
     * @memberof InlineResponse2007
     */
    'data'?: RegionResource;
}
/**
 * 
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * 
     * @type {Array<RuleResource>}
     * @memberof InlineResponse2008
     */
    'data'?: Array<RuleResource>;
}
/**
 * 
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     * 
     * @type {Rule}
     * @memberof InlineResponse2009
     */
    'data'?: Rule;
}
/**
 * Login model
 * @export
 * @interface Login
 */
export interface Login {
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    'password'?: string;
}
/**
 * Login Resource model
 * @export
 * @interface LoginResource
 */
export interface LoginResource {
    /**
     * 
     * @type {number}
     * @memberof LoginResource
     */
    'user_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LoginResource
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResource
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResource
     */
    'level'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResource
     */
    'access_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResource
     */
    'token_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResource
     */
    'expires_at'?: string;
}
/**
 * Media model
 * @export
 * @interface Media
 */
export interface Media {
    /**
     * 
     * @type {number}
     * @memberof Media
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    'filename'?: string;
    /**
     * 
     * @type {number}
     * @memberof Media
     */
    'media_type_id'?: number;
}
/**
 * MediaType model
 * @export
 * @interface MediaType
 */
export interface MediaType {
    /**
     * 
     * @type {number}
     * @memberof MediaType
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MediaType
     */
    'name'?: string;
}
/**
 * MediaType Resource model
 * @export
 * @interface MediaTypeResource
 */
export interface MediaTypeResource {
    /**
     * 
     * @type {number}
     * @memberof MediaTypeResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MediaTypeResource
     */
    'name'?: string;
}
/**
 * Region model
 * @export
 * @interface Region
 */
export interface Region {
    /**
     * 
     * @type {number}
     * @memberof Region
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof Region
     */
    'site_id'?: number;
}
/**
 * Region Full Resource model
 * @export
 * @interface RegionFullResource
 */
export interface RegionFullResource {
    /**
     * 
     * @type {number}
     * @memberof RegionFullResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RegionFullResource
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegionFullResource
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof RegionFullResource
     */
    'site_id'?: number;
    /**
     * 
     * @type {Array<RegionFullResourceAdventures>}
     * @memberof RegionFullResource
     */
    'adventures'?: Array<RegionFullResourceAdventures>;
}
/**
 * 
 * @export
 * @interface RegionFullResourceAdventures
 */
export interface RegionFullResourceAdventures {
    /**
     * 
     * @type {string}
     * @memberof RegionFullResourceAdventures
     */
    'country_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegionFullResourceAdventures
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RegionFullResourceAdventures
     */
    'highlights'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RegionFullResourceAdventures
     */
    'testimonial'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegionFullResourceAdventures
     */
    'client_name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RegionFullResourceAdventures
     */
    'slides'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RegionFullResourceAdventures
     */
    'map_url'?: string;
}
/**
 * Region Resource model
 * @export
 * @interface RegionResource
 */
export interface RegionResource {
    /**
     * 
     * @type {number}
     * @memberof RegionResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RegionResource
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegionResource
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof RegionResource
     */
    'site_id'?: number;
}
/**
 * Rule model
 * @export
 * @interface Rule
 */
export interface Rule {
    /**
     * 
     * @type {number}
     * @memberof Rule
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Rule
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Rule
     */
    'text'?: string;
    /**
     * 
     * @type {number}
     * @memberof Rule
     */
    'site_id'?: number;
}
/**
 * Rule Resource model
 * @export
 * @interface RuleResource
 */
export interface RuleResource {
    /**
     * 
     * @type {number}
     * @memberof RuleResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RuleResource
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof RuleResource
     */
    'text'?: string;
    /**
     * 
     * @type {AdventureResourceRegion}
     * @memberof RuleResource
     */
    'site'?: AdventureResourceRegion;
}
/**
 * Site model
 * @export
 * @interface Site
 */
export interface Site {
    /**
     * 
     * @type {number}
     * @memberof Site
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Site
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Site
     */
    'flag_url'?: string;
}
/**
 * Site Resource model
 * @export
 * @interface SiteResource
 */
export interface SiteResource {
    /**
     * 
     * @type {number}
     * @memberof SiteResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SiteResource
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SiteResource
     */
    'flag_url'?: string;
}
/**
 * Slide model
 * @export
 * @interface Slide
 */
export interface Slide {
    /**
     * 
     * @type {number}
     * @memberof Slide
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Slide
     */
    'url'?: string;
    /**
     * 
     * @type {number}
     * @memberof Slide
     */
    'media_type_id'?: number;
}
/**
 * Subject model
 * @export
 * @interface Subject
 */
export interface Subject {
    /**
     * 
     * @type {number}
     * @memberof Subject
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    'name'?: string;
}
/**
 * User model
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'level'?: string;
}
/**
 * User Resource model
 * @export
 * @interface UserResource
 */
export interface UserResource {
    /**
     * 
     * @type {number}
     * @memberof UserResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserResource
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResource
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResource
     */
    'level'?: string;
}

/**
 * AdventureApi - axios parameter creator
 * @export
 */
export const AdventureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Adventure} adventure 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAdventure: async (adventure: Adventure, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adventure' is not null or undefined
            assertParamExists('addAdventure', 'adventure', adventure)
            const localVarPath = `/adventure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adventure, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adventureList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adventure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Adventure ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdventure: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAdventure', 'id', id)
            const localVarPath = `/adventure/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Adventure ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdventure: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAdventure', 'id', id)
            const localVarPath = `/adventure/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} regionId Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdventureByRegionId: async (regionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'regionId' is not null or undefined
            assertParamExists('getAdventureByRegionId', 'regionId', regionId)
            const localVarPath = `/adventure/getByRegionId/{regionId}`
                .replace(`{${"regionId"}}`, encodeURIComponent(String(regionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Adventure ID
         * @param {Adventure} adventure 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdventure: async (id: number, adventure: Adventure, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAdventure', 'id', id)
            // verify required parameter 'adventure' is not null or undefined
            assertParamExists('updateAdventure', 'adventure', adventure)
            const localVarPath = `/adventure/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adventure, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdventureApi - functional programming interface
 * @export
 */
export const AdventureApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdventureApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Adventure} adventure 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAdventure(adventure: Adventure, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Adventure>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAdventure(adventure, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adventureList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adventureList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Adventure ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAdventure(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdventure(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Adventure ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdventure(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdventure(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} regionId Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdventureByRegionId(regionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdventureByRegionId(regionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Adventure ID
         * @param {Adventure} adventure 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAdventure(id: number, adventure: Adventure, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Adventure>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAdventure(id, adventure, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdventureApi - factory interface
 * @export
 */
export const AdventureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdventureApiFp(configuration)
    return {
        /**
         * 
         * @param {Adventure} adventure 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAdventure(adventure: Adventure, options?: any): AxiosPromise<Adventure> {
            return localVarFp.addAdventure(adventure, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adventureList(options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.adventureList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Adventure ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdventure(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteAdventure(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Adventure ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdventure(id: number, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getAdventure(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} regionId Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdventureByRegionId(regionId: number, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getAdventureByRegionId(regionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Adventure ID
         * @param {Adventure} adventure 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdventure(id: number, adventure: Adventure, options?: any): AxiosPromise<Adventure> {
            return localVarFp.updateAdventure(id, adventure, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdventureApi - object-oriented interface
 * @export
 * @class AdventureApi
 * @extends {BaseAPI}
 */
export class AdventureApi extends BaseAPI {
    /**
     * 
     * @param {Adventure} adventure 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdventureApi
     */
    public addAdventure(adventure: Adventure, options?: AxiosRequestConfig) {
        return AdventureApiFp(this.configuration).addAdventure(adventure, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdventureApi
     */
    public adventureList(options?: AxiosRequestConfig) {
        return AdventureApiFp(this.configuration).adventureList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Adventure ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdventureApi
     */
    public deleteAdventure(id: number, options?: AxiosRequestConfig) {
        return AdventureApiFp(this.configuration).deleteAdventure(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Adventure ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdventureApi
     */
    public getAdventure(id: number, options?: AxiosRequestConfig) {
        return AdventureApiFp(this.configuration).getAdventure(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} regionId Region ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdventureApi
     */
    public getAdventureByRegionId(regionId: number, options?: AxiosRequestConfig) {
        return AdventureApiFp(this.configuration).getAdventureByRegionId(regionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Adventure ID
     * @param {Adventure} adventure 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdventureApi
     */
    public updateAdventure(id: number, adventure: Adventure, options?: AxiosRequestConfig) {
        return AdventureApiFp(this.configuration).updateAdventure(id, adventure, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Login} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin: async (login: Login, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            assertParamExists('authLogin', 'login', login)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(login, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Login} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (login: Login, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            assertParamExists('changePassword', 'login', login)
            const localVarPath = `/auth/changePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(login, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Login} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogin(login: Login, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogin(login, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Login} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(login: Login, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(login, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {Login} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin(login: Login, options?: any): AxiosPromise<LoginResource> {
            return localVarFp.authLogin(login, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Login} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(login: Login, options?: any): AxiosPromise<any> {
            return localVarFp.changePassword(login, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout(options?: any): AxiosPromise<void> {
            return localVarFp.userLogout(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {Login} login 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLogin(login: Login, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLogin(login, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Login} login 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public changePassword(login: Login, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).changePassword(login, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public userLogout(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).userLogout(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ExodusAPIsApi - axios parameter creator
 * @export
 */
export const ExodusAPIsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} adventureId Adventure ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdventureInfo: async (adventureId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adventureId' is not null or undefined
            assertParamExists('getAdventureInfo', 'adventureId', adventureId)
            const localVarPath = `/exodus/getAdventureInfo/{adventureId}`
                .replace(`{${"adventureId"}}`, encodeURIComponent(String(adventureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} regionId Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdventureList: async (regionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'regionId' is not null or undefined
            assertParamExists('getAdventureList', 'regionId', regionId)
            const localVarPath = `/exodus/getAdventureList/{regionId}`
                .replace(`{${"regionId"}}`, encodeURIComponent(String(regionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegionList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exodus/getRegionList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exodus/getRegions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegionsBysiteId: async (siteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteId' is not null or undefined
            assertParamExists('getRegionsBysiteId', 'siteId', siteId)
            const localVarPath = `/exodus/getRegionsBySiteId/{siteId}`
                .replace(`{${"siteId"}}`, encodeURIComponent(String(siteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exodus/getSites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExodusAPIsApi - functional programming interface
 * @export
 */
export const ExodusAPIsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExodusAPIsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} adventureId Adventure ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdventureInfo(adventureId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdventureInfo(adventureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} regionId Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdventureList(regionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdventureList(regionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegionList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegionList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegionsBysiteId(siteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegionsBysiteId(siteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSiteList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSiteList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExodusAPIsApi - factory interface
 * @export
 */
export const ExodusAPIsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExodusAPIsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} adventureId Adventure ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdventureInfo(adventureId: number, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getAdventureInfo(adventureId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} regionId Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdventureList(regionId: number, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getAdventureList(regionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegionList(options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.getRegionList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegions(options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.getRegions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegionsBysiteId(siteId: number, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.getRegionsBysiteId(siteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteList(options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.getSiteList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExodusAPIsApi - object-oriented interface
 * @export
 * @class ExodusAPIsApi
 * @extends {BaseAPI}
 */
export class ExodusAPIsApi extends BaseAPI {
    /**
     * 
     * @param {number} adventureId Adventure ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExodusAPIsApi
     */
    public getAdventureInfo(adventureId: number, options?: AxiosRequestConfig) {
        return ExodusAPIsApiFp(this.configuration).getAdventureInfo(adventureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} regionId Region ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExodusAPIsApi
     */
    public getAdventureList(regionId: number, options?: AxiosRequestConfig) {
        return ExodusAPIsApiFp(this.configuration).getAdventureList(regionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExodusAPIsApi
     */
    public getRegionList(options?: AxiosRequestConfig) {
        return ExodusAPIsApiFp(this.configuration).getRegionList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExodusAPIsApi
     */
    public getRegions(options?: AxiosRequestConfig) {
        return ExodusAPIsApiFp(this.configuration).getRegions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} siteId Site ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExodusAPIsApi
     */
    public getRegionsBysiteId(siteId: number, options?: AxiosRequestConfig) {
        return ExodusAPIsApiFp(this.configuration).getRegionsBysiteId(siteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExodusAPIsApi
     */
    public getSiteList(options?: AxiosRequestConfig) {
        return ExodusAPIsApiFp(this.configuration).getSiteList(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MediaApi - axios parameter creator
 * @export
 */
export const MediaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id Media ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _288ae9e127972bc1367d0af34297f27c: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_288ae9e127972bc1367d0af34297f27c', 'id', id)
            const localVarPath = `/media/deleteMedia/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Media ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadMedia: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('downloadMedia', 'id', id)
            const localVarPath = `/media/downloadMedia/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} mediaTypeId 
         * @param {any} file file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMedia: async (mediaTypeId: number, file: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mediaTypeId' is not null or undefined
            assertParamExists('uploadMedia', 'mediaTypeId', mediaTypeId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadMedia', 'file', file)
            const localVarPath = `/media/uploadMedia`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (mediaTypeId !== undefined) { 
                localVarFormParams.append('media_type_id', mediaTypeId as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', new Blob([JSON.stringify(file)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaApi - functional programming interface
 * @export
 */
export const MediaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MediaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id Media ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _288ae9e127972bc1367d0af34297f27c(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._288ae9e127972bc1367d0af34297f27c(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Media ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadMedia(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadMedia(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} mediaTypeId 
         * @param {any} file file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadMedia(mediaTypeId: number, file: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Media>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadMedia(mediaTypeId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MediaApi - factory interface
 * @export
 */
export const MediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MediaApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id Media ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _288ae9e127972bc1367d0af34297f27c(id: number, options?: any): AxiosPromise<any> {
            return localVarFp._288ae9e127972bc1367d0af34297f27c(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Media ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadMedia(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.downloadMedia(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} mediaTypeId 
         * @param {any} file file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMedia(mediaTypeId: number, file: any, options?: any): AxiosPromise<Media> {
            return localVarFp.uploadMedia(mediaTypeId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
export class MediaApi extends BaseAPI {
    /**
     * 
     * @param {number} id Media ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public _288ae9e127972bc1367d0af34297f27c(id: number, options?: AxiosRequestConfig) {
        return MediaApiFp(this.configuration)._288ae9e127972bc1367d0af34297f27c(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Media ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public downloadMedia(id: number, options?: AxiosRequestConfig) {
        return MediaApiFp(this.configuration).downloadMedia(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} mediaTypeId 
     * @param {any} file file to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public uploadMedia(mediaTypeId: number, file: any, options?: AxiosRequestConfig) {
        return MediaApiFp(this.configuration).uploadMedia(mediaTypeId, file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MediaTypeApi - axios parameter creator
 * @export
 */
export const MediaTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _0df5be1eea3e1425a62af192ccf1a514: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mediatype`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Media Type ID
         * @param {MediaType} mediaType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b1a66a80eeeaf7177f395b0f3652e457: async (id: number, mediaType: MediaType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('b1a66a80eeeaf7177f395b0f3652e457', 'id', id)
            // verify required parameter 'mediaType' is not null or undefined
            assertParamExists('b1a66a80eeeaf7177f395b0f3652e457', 'mediaType', mediaType)
            const localVarPath = `/mediatype/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mediaType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MediaType} mediaType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cecdbcc2202fc94e01edcf61f8f89119: async (mediaType: MediaType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mediaType' is not null or undefined
            assertParamExists('cecdbcc2202fc94e01edcf61f8f89119', 'mediaType', mediaType)
            const localVarPath = `/mediatype`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mediaType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Media Type ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e38550531275a28f7911f967a9bdd3f9: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('e38550531275a28f7911f967a9bdd3f9', 'id', id)
            const localVarPath = `/mediatype/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Media Type ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ebb7786f5d04ac4384dd799a77052087: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ebb7786f5d04ac4384dd799a77052087', 'id', id)
            const localVarPath = `/mediatype/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaTypeApi - functional programming interface
 * @export
 */
export const MediaTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MediaTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _0df5be1eea3e1425a62af192ccf1a514(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._0df5be1eea3e1425a62af192ccf1a514(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Media Type ID
         * @param {MediaType} mediaType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async b1a66a80eeeaf7177f395b0f3652e457(id: number, mediaType: MediaType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.b1a66a80eeeaf7177f395b0f3652e457(id, mediaType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MediaType} mediaType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cecdbcc2202fc94e01edcf61f8f89119(mediaType: MediaType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cecdbcc2202fc94e01edcf61f8f89119(mediaType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Media Type ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async e38550531275a28f7911f967a9bdd3f9(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.e38550531275a28f7911f967a9bdd3f9(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Media Type ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ebb7786f5d04ac4384dd799a77052087(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ebb7786f5d04ac4384dd799a77052087(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MediaTypeApi - factory interface
 * @export
 */
export const MediaTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MediaTypeApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _0df5be1eea3e1425a62af192ccf1a514(options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp._0df5be1eea3e1425a62af192ccf1a514(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Media Type ID
         * @param {MediaType} mediaType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b1a66a80eeeaf7177f395b0f3652e457(id: number, mediaType: MediaType, options?: any): AxiosPromise<MediaType> {
            return localVarFp.b1a66a80eeeaf7177f395b0f3652e457(id, mediaType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MediaType} mediaType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cecdbcc2202fc94e01edcf61f8f89119(mediaType: MediaType, options?: any): AxiosPromise<MediaType> {
            return localVarFp.cecdbcc2202fc94e01edcf61f8f89119(mediaType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Media Type ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e38550531275a28f7911f967a9bdd3f9(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.e38550531275a28f7911f967a9bdd3f9(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Media Type ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ebb7786f5d04ac4384dd799a77052087(id: number, options?: any): AxiosPromise<InlineResponse2006> {
            return localVarFp.ebb7786f5d04ac4384dd799a77052087(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MediaTypeApi - object-oriented interface
 * @export
 * @class MediaTypeApi
 * @extends {BaseAPI}
 */
export class MediaTypeApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaTypeApi
     */
    public _0df5be1eea3e1425a62af192ccf1a514(options?: AxiosRequestConfig) {
        return MediaTypeApiFp(this.configuration)._0df5be1eea3e1425a62af192ccf1a514(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Media Type ID
     * @param {MediaType} mediaType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaTypeApi
     */
    public b1a66a80eeeaf7177f395b0f3652e457(id: number, mediaType: MediaType, options?: AxiosRequestConfig) {
        return MediaTypeApiFp(this.configuration).b1a66a80eeeaf7177f395b0f3652e457(id, mediaType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MediaType} mediaType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaTypeApi
     */
    public cecdbcc2202fc94e01edcf61f8f89119(mediaType: MediaType, options?: AxiosRequestConfig) {
        return MediaTypeApiFp(this.configuration).cecdbcc2202fc94e01edcf61f8f89119(mediaType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Media Type ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaTypeApi
     */
    public e38550531275a28f7911f967a9bdd3f9(id: number, options?: AxiosRequestConfig) {
        return MediaTypeApiFp(this.configuration).e38550531275a28f7911f967a9bdd3f9(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Media Type ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaTypeApi
     */
    public ebb7786f5d04ac4384dd799a77052087(id: number, options?: AxiosRequestConfig) {
        return MediaTypeApiFp(this.configuration).ebb7786f5d04ac4384dd799a77052087(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RegionApi - axios parameter creator
 * @export
 */
export const RegionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Region} region 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRegion: async (region: Region, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'region' is not null or undefined
            assertParamExists('addRegion', 'region', region)
            const localVarPath = `/region`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(region, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRegion: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRegion', 'id', id)
            const localVarPath = `/region/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBySiteId: async (siteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteId' is not null or undefined
            assertParamExists('getBySiteId', 'siteId', siteId)
            const localVarPath = `/region/getBySiteId/{siteId}`
                .replace(`{${"siteId"}}`, encodeURIComponent(String(siteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegion: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRegion', 'id', id)
            const localVarPath = `/region/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/region`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Region ID
         * @param {Region} region 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegion: async (id: number, region: Region, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRegion', 'id', id)
            // verify required parameter 'region' is not null or undefined
            assertParamExists('updateRegion', 'region', region)
            const localVarPath = `/region/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(region, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegionApi - functional programming interface
 * @export
 */
export const RegionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Region} region 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRegion(region: Region, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Region>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRegion(region, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRegion(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRegion(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBySiteId(siteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBySiteId(siteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegion(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegion(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.regionList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Region ID
         * @param {Region} region 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRegion(id: number, region: Region, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Region>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRegion(id, region, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegionApi - factory interface
 * @export
 */
export const RegionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegionApiFp(configuration)
    return {
        /**
         * 
         * @param {Region} region 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRegion(region: Region, options?: any): AxiosPromise<Region> {
            return localVarFp.addRegion(region, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRegion(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteRegion(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBySiteId(siteId: number, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.getBySiteId(siteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegion(id: number, options?: any): AxiosPromise<InlineResponse2007> {
            return localVarFp.getRegion(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionList(options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.regionList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Region ID
         * @param {Region} region 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegion(id: number, region: Region, options?: any): AxiosPromise<Region> {
            return localVarFp.updateRegion(id, region, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegionApi - object-oriented interface
 * @export
 * @class RegionApi
 * @extends {BaseAPI}
 */
export class RegionApi extends BaseAPI {
    /**
     * 
     * @param {Region} region 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionApi
     */
    public addRegion(region: Region, options?: AxiosRequestConfig) {
        return RegionApiFp(this.configuration).addRegion(region, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Region ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionApi
     */
    public deleteRegion(id: number, options?: AxiosRequestConfig) {
        return RegionApiFp(this.configuration).deleteRegion(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} siteId Site ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionApi
     */
    public getBySiteId(siteId: number, options?: AxiosRequestConfig) {
        return RegionApiFp(this.configuration).getBySiteId(siteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Region ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionApi
     */
    public getRegion(id: number, options?: AxiosRequestConfig) {
        return RegionApiFp(this.configuration).getRegion(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionApi
     */
    public regionList(options?: AxiosRequestConfig) {
        return RegionApiFp(this.configuration).regionList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Region ID
     * @param {Region} region 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionApi
     */
    public updateRegion(id: number, region: Region, options?: AxiosRequestConfig) {
        return RegionApiFp(this.configuration).updateRegion(id, region, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RuleApi - axios parameter creator
 * @export
 */
export const RuleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Rule} rule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRules: async (rule: Rule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rule' is not null or undefined
            assertParamExists('addRules', 'rule', rule)
            const localVarPath = `/rule/addRules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rule, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Rule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRule: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRule', 'id', id)
            const localVarPath = `/rule/deleteRules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Rule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRule: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRule', 'id', id)
            const localVarPath = `/rule/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRulesBySiteId: async (siteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteId' is not null or undefined
            assertParamExists('getRulesBySiteId', 'siteId', siteId)
            const localVarPath = `/rule/getRulesBySiteId/{siteId}`
                .replace(`{${"siteId"}}`, encodeURIComponent(String(siteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rulesList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Rule ID
         * @param {Rule} rule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRules: async (id: number, rule: Rule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRules', 'id', id)
            // verify required parameter 'rule' is not null or undefined
            assertParamExists('updateRules', 'rule', rule)
            const localVarPath = `/rule/updateRules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rule, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RuleApi - functional programming interface
 * @export
 */
export const RuleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RuleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Rule} rule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRules(rule: Rule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRules(rule, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Rule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRule(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRule(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Rule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRule(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRule(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRulesBySiteId(siteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRulesBySiteId(siteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rulesList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rulesList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Rule ID
         * @param {Rule} rule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRules(id: number, rule: Rule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRules(id, rule, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RuleApi - factory interface
 * @export
 */
export const RuleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RuleApiFp(configuration)
    return {
        /**
         * 
         * @param {Rule} rule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRules(rule: Rule, options?: any): AxiosPromise<Rule> {
            return localVarFp.addRules(rule, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Rule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRule(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteRule(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Rule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRule(id: number, options?: any): AxiosPromise<InlineResponse2009> {
            return localVarFp.getRule(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRulesBySiteId(siteId: number, options?: any): AxiosPromise<InlineResponse2008> {
            return localVarFp.getRulesBySiteId(siteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rulesList(options?: any): AxiosPromise<InlineResponse2008> {
            return localVarFp.rulesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Rule ID
         * @param {Rule} rule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRules(id: number, rule: Rule, options?: any): AxiosPromise<Rule> {
            return localVarFp.updateRules(id, rule, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RuleApi - object-oriented interface
 * @export
 * @class RuleApi
 * @extends {BaseAPI}
 */
export class RuleApi extends BaseAPI {
    /**
     * 
     * @param {Rule} rule 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public addRules(rule: Rule, options?: AxiosRequestConfig) {
        return RuleApiFp(this.configuration).addRules(rule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Rule ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public deleteRule(id: number, options?: AxiosRequestConfig) {
        return RuleApiFp(this.configuration).deleteRule(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Rule ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public getRule(id: number, options?: AxiosRequestConfig) {
        return RuleApiFp(this.configuration).getRule(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} siteId Site ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public getRulesBySiteId(siteId: number, options?: AxiosRequestConfig) {
        return RuleApiFp(this.configuration).getRulesBySiteId(siteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public rulesList(options?: AxiosRequestConfig) {
        return RuleApiFp(this.configuration).rulesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Rule ID
     * @param {Rule} rule 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public updateRules(id: number, rule: Rule, options?: AxiosRequestConfig) {
        return RuleApiFp(this.configuration).updateRules(id, rule, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SiteApi - axios parameter creator
 * @export
 */
export const SiteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Site} site 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSite: async (site: Site, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'site' is not null or undefined
            assertParamExists('addSite', 'site', site)
            const localVarPath = `/site`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(site, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSite: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSite', 'id', id)
            const localVarPath = `/site/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSite: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSite', 'id', id)
            const localVarPath = `/site/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/site`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Site ID
         * @param {Site} site 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSite: async (id: number, site: Site, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSite', 'id', id)
            // verify required parameter 'site' is not null or undefined
            assertParamExists('updateSite', 'site', site)
            const localVarPath = `/site/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(site, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SiteApi - functional programming interface
 * @export
 */
export const SiteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SiteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Site} site 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSite(site: Site, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Site>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSite(site, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSite(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSite(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSite(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSite(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Site ID
         * @param {Site} site 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSite(id: number, site: Site, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Site>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSite(id, site, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SiteApi - factory interface
 * @export
 */
export const SiteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SiteApiFp(configuration)
    return {
        /**
         * 
         * @param {Site} site 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSite(site: Site, options?: any): AxiosPromise<Site> {
            return localVarFp.addSite(site, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSite(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteSite(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSite(id: number, options?: any): AxiosPromise<InlineResponse20010> {
            return localVarFp.getSite(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteList(options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.siteList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Site ID
         * @param {Site} site 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSite(id: number, site: Site, options?: any): AxiosPromise<Site> {
            return localVarFp.updateSite(id, site, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SiteApi - object-oriented interface
 * @export
 * @class SiteApi
 * @extends {BaseAPI}
 */
export class SiteApi extends BaseAPI {
    /**
     * 
     * @param {Site} site 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public addSite(site: Site, options?: AxiosRequestConfig) {
        return SiteApiFp(this.configuration).addSite(site, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Site ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public deleteSite(id: number, options?: AxiosRequestConfig) {
        return SiteApiFp(this.configuration).deleteSite(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Site ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public getSite(id: number, options?: AxiosRequestConfig) {
        return SiteApiFp(this.configuration).getSite(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public siteList(options?: AxiosRequestConfig) {
        return SiteApiFp(this.configuration).siteList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Site ID
     * @param {Site} site 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public updateSite(id: number, site: Site, options?: AxiosRequestConfig) {
        return SiteApiFp(this.configuration).updateSite(id, site, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser: async (user: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('addUser', 'user', user)
            const localVarPath = `/user/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUser', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id User ID
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (id: number, user: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            // verify required parameter 'user' is not null or undefined
            assertParamExists('updateUser', 'user', user)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUser(user: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUser(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20012>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id User ID
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(id: number, user: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20011>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(user: User, options?: any): AxiosPromise<UserResource> {
            return localVarFp.addUser(user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: number, options?: any): AxiosPromise<InlineResponse20012> {
            return localVarFp.getUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id User ID
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(id: number, user: User, options?: any): AxiosPromise<UserResource> {
            return localVarFp.updateUser(id, user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userList(options?: any): AxiosPromise<InlineResponse20011> {
            return localVarFp.userList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {User} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public addUser(user: User, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).addUser(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUser(id: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).deleteUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUser(id: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id User ID
     * @param {User} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUser(id: number, user: User, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUser(id, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userList(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userList(options).then((request) => request(this.axios, this.basePath));
    }
}


